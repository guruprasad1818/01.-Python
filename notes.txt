-> write Python code

   -> script mode (100%)
     
     -> using code editor
      
   -> Command line / Interactive mode(Quick checks)

      -> Directly executing code on python Interpretort  using 
          CLI (Command line interface)

    -> Syntax - rule and guidlines

    -> print (hello world) -- issue 
    -> print (9)

    -> 9 is literal number , it doesn't need to be defined before hand 
    -> hello world is a text, which needs to be represented in wsingle or
     double quotes

       -> print (hello world) wrong syntex 
       -> print ("hello world") correct syntex  
    
    -> Like English has 26 alphabets, which is basis for forming 
        words and sentences
    
    -> Python has same concept, which are called as Keywords

        -> keywords + syntax = program / app

    -> import is a keyword --> imports module --> module is a .py file

  -> Identifiers
       
       -> Within python an Identifier is name used to identify following

          -> Variables 
          -> functuions
          -> Classes
          -> Objects
          -> methods
          -> modules 
          -> etc 
           
        -> rules for naming Identifiers

            -> can contain 

               -> letters (a-zm, A-Z)
               -> sdigits (0-9)
               -> underscore(_)

               
            -> String : A sequence of characters declared between '' or " "
            -> NOTE : Python doesn't support single character data type
        
        -> Boolean Type:

            -> Returns True or False 
        
        -> Sequence Types 

            -> String is also a sequence type
            -> List : Multiple Values to be stored as a sequence, represented in [] -> Mutable (Changeable)
            -> Tuple : Multiple Values to be stored as a sequence, represented in () -> Immutable (Not Changeable)
        
        -> Set Type

            -> Set : Multiple Values to be stored as a sequence, represented in {} -> Unique Data Only
            -> Frozen Set : Multiple Values to be stored as a sequence, represented in {} -> Unique Data Only & Immutable

        -> Dictionary(Mapping) Type

            -> Dictionary : Multiple Values to be stored as a sequence of key and value pairs, , represented in {}

        -> None Type : Represents nothing i.e absence of value

        -> NOTE : All the above are predefined data types, we can create our custom data types based on requirements  
-> Variables

    -> Variables are names for memory locations

        -> Persistent Data (Permanent Data / Long Term Data)

            -> Hard Disk 

        -> Non-Persistent Data (Temporary Data)

            -> RAM (Memory)
    
    -> A variable allows you to 

        -> Assign Data
        -> Manipulate Data (If Required)
        -> Retrieve Data 

    -> Syntax 

        -> variable_name = value
            student_age = 25

            = Assignment operator

    -> NOTE: In Python, the type of a variable can change during execution.

    -> NOTE: A function does a task, and is represented using ()

    -> type() - what is the data type of specified variable

    -> id() - gives the memory address/location of variable

    -> NOTE: Even though a and c are different variables, 
        Python optimizes memory and may reuse the same object.
    
    -> Mutable Data : Data that can change / can be changed (Modify)

        -> Lists, Dictionaries, Sets etc

    -> Immutable Data : Data that cannot be changed (Non Modifiable)

        -> numbers, strings, tuples etc

    -> Any variable data, we can output using print() 

    -> Operator Overloading - a single operator exhibits multiple behaviors
        based on the input data given (OOPS Principle - Polymorphism)


-> What is concatenation ? 
    -> Joining multiple Strings

-> What is interpolation ? 
    -> interpolation in programming means replacing placeholders with actual values

-> Using f-Strings (Formatted String Literals)  

    -> An f-String allows you to embed variables directly inside a string using {}

-> A variable allows you to 

        -> Assign Data
            -> Manipulate Data (If Required)
        -> Retrieve Data 


-> Operators

    -> In python, an operator is symbol which performs an operation on
        variables and values

    -> To Manipulate Data we need Operators    

    -> Types Of Operators

        -> Arithmetic Operators - Mathematical calculations
            -> + - * / % 
            -> //- floor division (same as division, but round off value)
            -> ** - exponentiation

        -> Compound Assignment Operators
            -> Python provides Operator to combine Arithmetic and Assignment Operators
            -> For concise(short hand) coding 
            -> x = x + 5 --> x += 5

        -> Comparison Operators    

            -> Used to compare values and return a boolean type(True/False) as result
            -> ==, !=, >, <, >=, <=

        -> Logical Operators
            -> Used to combine multiple conditions(boolean values)
            -> and - return true, when conditions are true
            -> or - return true, at least one condition is true
            -> not - negates the boolean value, if value is true then its result false




        -> Membership Operators
            -> It's used to test if a sequence is present in object
                -> in : returns True if the sequence has specified value
                -> not in : returns True if the sequence has no specified value

        -> Identity Operators
            -> It's sued to compare objects 
            -> NOTE : Not comparing values (If you want to compare values use ==)

                -> is : Returns True if both variables are pointing to same memory block
                -> is not : Returns True if both variables are not pointing to same memory block    


            -> NOTE : Is Python 100% Object Oriented Language or not ? Yes
                        -> In python everything is an object

                -> Java has primitive data types


-> Data Types 

    -> Data Types are categories that define, what kind of data a variable can hold

    -> Numeric Types

        -> Numbers with or without decimal points
 -> Integer : Whole Numbers 0,1,-1,199 etc
            -> Float : Decimal numbers 3.14, 10.5, 2.0 etc
            -> Complex : Complex numbers like in maths
                        Math : a + ib (i - imaginary)
                        Python : a + bj (j - imaginary)
        
        -> Text Type:

            -> String : A sequence of characters declared between '' or " "
            -> NOTE : Python doesn't support single character data type
        
        -> Boolean Type:

            -> Returns True or False 
        
        -> Sequence Types 

            -> String is also a sequence type
            -> List : Multiple Values to be stored as a sequence, represented in [] -> Mutable (Changeable)
            -> Tuple : Multiple Values to be stored as a sequence, represented in () -> Immutable (Not Changeable)
        
        -> Set Type

            -> Set : Multiple Values to be stored as a sequence, represented in {} -> Unique Data Only
            -> Frozen Set : Multiple Values to be stored as a sequence, represented in {} -> Unique Data Only & Immutable

        -> Dictionary(Mapping) Type

            -> Dictionary : Multiple Values to be stored as a sequence of key and value pairs, , represented in {}

        -> None Type : Represents nothing i.e absence of value

        -> NOTE : All the above are predefined data types, we can create our custom data types based on requirements  



============

-> Student Management System

-> Type Conversion & Type Casting

    -> The above are used to convert values from one data type to another data type

    -> Type Conversion : Implicit / Automatic meaning python by default performs 
        conversions when it's safe and there is no data loss 
            -> Widening : conversion of smaller data types to larger 
    
    -> Type Casting : Explicit / Manually done by developer using built in functions
        -> Narrowing : conversion of larger data types to smaller 
            -> int() -> converts to integer --> int(3.5) - 3
            -> float() -> converts to float --> int(3) - 3.0
            -> str() -> converts to string --> str(100) - "100"


============

    -> Control Structures / Statement

    -> Control Structures helps you to control the flow of execution in program

    -> Categories

        -> Decision Making Statements (Conditional Statements)
        -> Looping Statements (Iterative Statements)
        -> Branching Statements (Jump Statements)

    -> Conditional / Decision Making Statements

        -> Used to evaluate a condition (True/False) 

        -> if : Runs block of code if condition is true
        -> if else : Runs one block of code if condition is true and 
                     runs another block of code if condition is false
        -> elif ladder : Used to check multiple conditions 
        -> match-case : alternative to if-else, when you have multiple conditions
    
    -> Indentation : Refers to spaces to the beginning of the line that will 
        define code blocks (conditionals, loops, functions, classes etc)

        -> At least one space or recommended is 4 spaces 
        -> All lines in the same block must have same Indentation
        -> Improper Indentation : Syntax Error
    
    -> input() function : takes user input from keyboard as a string 

        -> variable = input("Enter Some Value)

    -> Ternary Operator : also called as Conditional Operator, allows you to
        write short hand if-else Statement, generally used for single expressions

        -> Syntax : 
            value_if_true if condition else value_if_false




    -> Nested Conditionals : Conditionals inside Conditionals

    -> Looping Statements (Iterative Statements)

        -> Used to execute a block of code repeatedly, based on a condition.

            -> For repetitive tasks and automation tasks
        
        -> while loop : Runs a block of code, as long as the specified condition is True

        -> for loop : Used to Iterate over a Sequence(Strings, Lists, Tuples, Range etc)
    
        -> dir() : used to list all the valid attributes and functionalities 

        -> range() : used to generate a sequence of numbers


    -> range(start,stop,step)

        -> start: starting value by default is 0
        -> stop: ending value(excluded)
        -> step: increment default is 1

    -> few examples

        -> range(5) : 0 1 2 3 4
        -> range(1,6) : 1 2 3 4 5
        -> range(1,6,1) : 1 2 3 4 5
        -> range(2,10,2) : 2 4 6 8 

    -> To Do the step reverse use -1

        -> range(10,1,-1) : 10 9 8 7 6 5 4 3 2
        -> range(10,1,-2) : 10 8 6 4 2
    
    -> Nested Loops : Loops inside Loops

    -> Branching Statements (Jump Statements)

        -> Used to control the flow of iterations inside the loops  

            -> break : exits the loop entirely
            -> continue : skips the current iteration and continue the loop
            -> pass : does nothing, generally used as place
